#!/bin/bash

# =========================
#  WP Staging Management Script
# =========================

set -e

# --- Usage/Help ---
if [[ "$1" == "-h" || "$1" == "--help" ]]; then
  echo "Usage: $0 <command> <auth_token> <production_dir> <staging_dir> <production_url> <staging_url> <user_id> <plugin_id> [function_param]"
  echo "Commands: create, clone, deploy_files, deploy_db, deploy_files_db, destroy, ..."
  exit 0
fi

# --- Parse parameters and set globals early (needed for logging path) ---
export PATH=/usr/local/bin:$PATH
PRODUCTION_DIR=$3
STAGING_DIR=$4
PRODUCTION_URL=$5
STAGING_URL=$6
USER_ID=$7
PLUGIN_ID=$8
DB_HOST=$(wp eval 'echo DB_HOST;' --path=$PRODUCTION_DIR --skip-themes --skip-plugins --quiet)
DB_NAME=$(wp eval 'echo DB_NAME;' --path=$PRODUCTION_DIR --skip-themes --skip-plugins --quiet)
DB_USER=$(wp eval 'echo DB_USER;' --path=$PRODUCTION_DIR --skip-themes --skip-plugins --quiet)
DB_PASS=$(wp eval 'echo DB_PASSWORD;' --path=$PRODUCTION_DIR --skip-themes --skip-plugins --quiet)
DB_PREFIX=$(wp eval 'global $wpdb; echo $wpdb->prefix;' --path=$PRODUCTION_DIR --skip-themes --skip-plugins --quiet)
STAGING_CONFIG_JSON=$(wp option get staging_config --format=json --path=$PRODUCTION_DIR --skip-themes --skip-plugins --quiet)
PRODUCTION_TABLES=$(wp db tables --all-tables-with-prefix --format=csv --path=$PRODUCTION_DIR --skip-themes --skip-plugins --quiet)
# LOG_FILE must be set after PRODUCTION_DIR is set
LOG_FILE="$PRODUCTION_DIR/nfd-staging.log"  # Log file always in production uploads
CONTENT_DIRS=(uploads themes plugins)

# --- Logging ---
log() {
  # log LEVEL STEP MESSAGE
  # Only write to log file (never stdout), to keep stdout clean for JSON parsing
  local level="$1"; local step="$2"; local msg="$3"
  mkdir -p "$(dirname "$LOG_FILE")"
  echo "$(date '+%Y-%m-%d %H:%M:%S') [$level] [$step] $msg" >> "$LOG_FILE"
  # Optionally, also print to stderr for debugging (uncomment if needed):
  # echo "$(date '+%Y-%m-%d %H:%M:%S') [$level] [$step] $msg" >&2
}

# --- Error Handling ---
error() {
  echo {"status":"error","message":"$1"}
  wp transient delete nfd_staging_lock --path="$PRODUCTION_DIR" --skip-themes --skip-plugins --quiet || true
  exit 1
}

run_or_fail() {
  # run_or_fail "step" "error message" command args...
  local step="$1"; shift
  local errmsg="$1"; shift
  # Perform command, log all output on temporary file
  local TMP_ERR=$(mktemp)
  "$@" > "$TMP_ERR" 2>&1
  local status=$?
  if [ -s "$TMP_ERR" ]; then
    while IFS= read -r line; do
      log "ERROR" "$step" "$line"
    done < "$TMP_ERR"
  fi
  rm -f "$TMP_ERR"
  if [ $status -ne 0 ]; then
    log "ERROR" "$step" "$errmsg"
    error "$errmsg"
  fi
}

# --- Cleanup on exit ---
cleanup() {
  wp transient delete nfd_staging_lock --path="$PRODUCTION_DIR" --skip-themes --skip-plugins --quiet || true
}
trap cleanup EXIT

# --- Utility: Move/copy content dirs robustly ---
move_content_dirs() {
  local FROM="$1"; local TO="$2"
  for DIR in "${CONTENT_DIRS[@]}"; do
    rm -rf "$TO/wp-content/$DIR" || error "Unable to remove $DIR directory."
    mkdir -p "$TO/wp-content/$DIR" || error "Unable to create $DIR folder."
    local SRC="$FROM/wp-content/$DIR"
    local DEST="$TO/wp-content/$DIR"
    if [ -d "$SRC" ] && [ "$(ls -A "$SRC" 2>/dev/null)" ]; then
      # Try rsync, fix permissions if needed
      local RSYNC_LOG=$(mktemp)
      rsync -r --exclude=.git "$SRC/" "$DEST" 2> "$RSYNC_LOG"
      local RSYNC_EXIT=$?
      if [ $RSYNC_EXIT -ne 0 ]; then
        log "ERROR" "move_content_dirs:$DIR" "First rsync failed. Log output:"
        while IFS= read -r line; do
          log "ERROR" "move_content_dirs:$DIR" "$line"
        done < "$RSYNC_LOG"
        grep "Permission denied" "$RSYNC_LOG" | awk -F"open \"" '{print $2}' | awk -F"\"" '{print $1}' | while read -r FILE; do
          if [ -n "$FILE" ]; then
            log "ERROR" "move_content_dirs:$DIR" "Permission denied on file: $FILE. Trying to fix permissions."
            chmod 644 "$FILE" 2>/dev/null
            chown $(whoami) "$FILE" 2>/dev/null
          fi
        done
        rsync -r --exclude=.git "$SRC/" "$DEST" 2>> "$RSYNC_LOG" || {
          log "ERROR" "move_content_dirs:$DIR" "Second rsync failed. Log output:"
          while IFS= read -r line; do
            log "ERROR" "move_content_dirs:$DIR" "$line"
          done < "$RSYNC_LOG"
          error "Unable to move $DIR folder (even after fixing permissions)."
        }
      fi
      rm -f "$RSYNC_LOG"
    else
      log "INFO" "move_files:$DIR" "No files to copy in $DIR, skipping rsync."
    fi
  done
}

# --- Authentication ---
auth_action() {
  if [ ! -d "$CURRENT_DIR" ]; then
    mkdir -p "$CURRENT_DIR" || error 'Unable to create directory.'
  fi
  cd "$CURRENT_DIR" || error 'Unable to switch directory.'
  TOKEN=$(wp transient get staging_auth_token --path=$CURRENT_DIR --skip-themes --skip-plugins --quiet)
  if [ "$1" != "$TOKEN" ] || [ -z "$TOKEN" ]; then
    wp transient delete staging_auth_token --path=$CURRENT_DIR
    error 'Unable to authenticate the action.'
  fi
  wp transient delete staging_auth_token --path=$CURRENT_DIR --skip-themes --skip-plugins --quiet
  log "SUCCESS" "auth_action" "Authentication successful."
}

# --- Lock check ---
lock_check() {
  local LOCK=$(wp transient get nfd_staging_lock --path=$PRODUCTION_DIR --skip-themes --skip-plugins --quiet)
  if [ -n "$LOCK" ]; then
    error 'Staging action is locked by another command.'
  fi
}

# --- Compatibility check ---
compatibility_check() {
  if ! command -v wp &>/dev/null; then
    echo "WP-CLI is not available."
    exit 1
  fi
  if [ "compat_check" == "$1" ]; then
    echo {"status":"success"}
    exit
  fi
}

# --- Rollback/Cleanup for failed staging creation ---
delete_temp_staging() {
  # Usage: delete_temp_staging <step> <message>
  # Rolls back partial staging creation if a step fails, cleaning up files, tables, and options.
  local step="${1:-0}"
  local message="${2:-Cleanup after failure}"
  step=$((step + 0))

  if [ "$step" -ge 5 ]; then
    wp option update nfd_coming_soon 'false' --path="$PRODUCTION_DIR" --skip-themes --skip-plugins --quiet
    log "INFO" "delete_temp_staging:step5" "Reverted nfd_coming_soon option."
  fi
  if [ "$step" -ge 4 ]; then
    wp option delete staging_config --path="$PRODUCTION_DIR" --skip-themes --skip-plugins --quiet
    log "INFO" "delete_temp_staging:step4" "Removed option staging_config."
  fi
  if [ "$step" -ge 3 ]; then
    wp db query "DROP TABLE IF EXISTS $(wp db tables --all-tables-with-prefix --format=csv --path=\"$STAGING_DIR\" | grep '^staging_' | tr '\n' ',' | sed 's/,$//')" --path="$STAGING_DIR" --skip-themes --skip-plugins --quiet
    log "INFO" "delete_temp_staging:step3" "Removed all staging tables."
  fi
  if [ "$step" -ge 2 ]; then
    wp option delete staging_environment --path="$PRODUCTION_DIR" --skip-themes --skip-plugins --quiet
    log "INFO" "delete_temp_staging:step2" "Removed option staging_environment."
  fi
  if [ "$step" -ge 1 ]; then
    rm -rf "$STAGING_DIR"
    log "INFO" "delete_temp_staging:step1" "Removed staging directory."
  fi

  log "ERROR" "delete_temp_staging" "$message"
  error "$message"
}

# --- Utility: Drop all views and tables robustly ---
drop_views_and_tables() {
  local WP_PATH="$1"
  # Get all views
  VIEWS=$(wp db query "SELECT table_name FROM information_schema.views WHERE table_schema=DATABASE();" --skip-column-names --path="$WP_PATH" --skip-themes --skip-plugins --quiet)
  # Get all tables
  TABLES=$(wp db tables --all-tables-with-prefix --format=csv --path="$WP_PATH" --skip-themes --skip-plugins --quiet)
  if [ -n "$VIEWS" ]; then
    log "INFO" "drop_views_and_tables" "Dropping views: $VIEWS"
    wp db query "DROP VIEW IF EXISTS $VIEWS;" --path="$WP_PATH" --skip-themes --skip-plugins --quiet
  fi
  if [ -n "$TABLES" ]; then
    log "INFO" "drop_views_and_tables" "Dropping tables: $TABLES"
    wp db query "DROP TABLE IF EXISTS $TABLES;" --path="$WP_PATH" --skip-themes --skip-plugins --quiet
  fi
}

# --- Main Functions ---
create() {
  set +e
  log "INFO" "create" "[STEP] Start."
  log "INFO" "create" "[STEP] Move to production directory."
  cd "$PRODUCTION_DIR" || error 'Unable to move to production directory.'
  log "INFO" "create" "[STEP] Get WP Version."
  WP_VER=$(wp core version)
  log "INFO" "create" "[STEP] Create staging directory."
  mkdir -p "$STAGING_DIR" || error 'Unable to create staging directory.'
  log "INFO" "create" "[STEP] Export database."
  TMP_EXPORT_LOG=$(mktemp)
  wp db export "$STAGING_DIR/.export-sql" --add-drop-table --skip-themes --skip-plugins --quiet --tables="$PRODUCTION_TABLES" >"$TMP_EXPORT_LOG" 2>&1
  EXPORT_STATUS=$?
  EXPORT_ERROR=$(cat "$TMP_EXPORT_LOG" | grep -v '^0$' | grep -v '^$')
  rm -f "$TMP_EXPORT_LOG"
  if [ $EXPORT_STATUS -ne 0 ]; then
    log "ERROR" "create:db_export" "Export error: $EXPORT_ERROR"
    error "Unable to export database."
  fi
  log "INFO" "create" "[STEP] Set env prod."
  TMP_ENV_LOG=$(mktemp)
  wp option update staging_environment production --skip-themes --skip-plugins --quiet >"$TMP_ENV_LOG" 2>&1
  ENV_STATUS=$?
  ENV_ERROR=$(cat "$TMP_ENV_LOG" | grep -v '^0$' | grep -v '^$')
  rm -f "$TMP_ENV_LOG"
  if [ $ENV_STATUS -ne 0 ]; then
    log "ERROR" "create:set_env_prod" "Set env prod error: $ENV_ERROR"
    error "Unable to set environment."
  fi
  log "INFO" "create" "[STEP] Move to staging directory."
  cd "$STAGING_DIR" || delete_temp_staging 2 "Unable to move to staging directory."
  log "INFO" "create" "[STEP] Move WP Content dir."
  move_content_dirs "$PRODUCTION_DIR" "$STAGING_DIR"
  log "INFO" "create" "[STEP] Core download/check symlink."
  if [ -L "$PRODUCTION_DIR/index.php" ]; then
    echo "path=$STAGING_DIR" > /nfssys/etc/wp_symink_watch/$(whoami).notify
    echo "SetEnv WP_ABSPATH $STAGING_DIR" > .htaccess
  else
    TMP_CORE_LOG=$(mktemp)
    wp core download --version="$WP_VER" --force >"$TMP_CORE_LOG" 2>&1
    CORE_STATUS=$?
    CORE_ERROR=$(cat "$TMP_CORE_LOG" | grep -v '^0$' | grep -v '^$')
    rm -f "$TMP_CORE_LOG"
    if [ $CORE_STATUS -ne 0 ]; then
      log "ERROR" "create:core_download" "Core download error: $CORE_ERROR"
      error "Unable to install WordPress in staging directory."
    fi
  fi
  log "INFO" "create" "[STEP] Set core config."
  TMP_CONFIG_LOG=$(mktemp)
  wp core config --dbhost="$DB_HOST" --dbname="$DB_NAME" --dbuser="$DB_USER" --dbpass="$DB_PASS" --dbprefix="staging_$DB_PREFIX" --skip-themes --skip-plugins --quiet >"$TMP_CONFIG_LOG" 2>&1
  CONFIG_STATUS=$?
  CONFIG_ERROR=$(cat "$TMP_CONFIG_LOG" | grep -v '^0$' | grep -v '^$')
  rm -f "$TMP_CONFIG_LOG"
  if [ $CONFIG_STATUS -ne 0 ]; then
    log "ERROR" "create:core_config" "Core config error: $CONFIG_ERROR"
    error "Unable to configure WordPress."
  fi
  log "INFO" "create" "[STEP] Update prefix SQL."
  tmpfile=$(mktemp)
  while IFS= read -r line; do
    echo "${line//${DB_PREFIX}/staging_${DB_PREFIX}}" >> "$tmpfile"
  done < "$STAGING_DIR/.export-sql"
  mv "$tmpfile" "$STAGING_DIR/.export-sql" > /dev/null 2>&1 || delete_temp_staging 2 "Unable to update database prefix."
  log "INFO" "create" "[STEP] Import database."
  TMP_IMPORT_LOG=$(mktemp)
  wp db import "$STAGING_DIR/.export-sql" --skip-themes --skip-plugins --quiet >"$TMP_IMPORT_LOG" 2>&1
  IMPORT_STATUS=$?
  IMPORT_ERROR=$(cat "$TMP_IMPORT_LOG" | grep -v '^0$' | grep -v '^$')
  rm -f "$TMP_IMPORT_LOG"
  if [ $IMPORT_STATUS -ne 0 ]; then
    log "ERROR" "create:db_import" "Import error: $IMPORT_ERROR"
    error "Unable to import database."
  fi
  log "INFO" "create" "[STEP] Delete SQL export."
  rm "$STAGING_DIR/.export-sql" --force > /dev/null 2>&1  # Suppress unwanted output
  log "INFO" "create" "[STEP] Set env staging."
  TMP_ENV2_LOG=$(mktemp)
  wp option update staging_environment staging --skip-themes --skip-plugins --quiet >"$TMP_ENV2_LOG" 2>&1
  ENV2_STATUS=$?
  ENV2_ERROR=$(cat "$TMP_ENV2_LOG" | grep -v '^0$' | grep -v '^$')
  rm -f "$TMP_ENV2_LOG"
  if [ $ENV2_STATUS -ne 0 ]; then
    log "ERROR" "create:set_env_staging" "Set env staging error: $ENV2_ERROR"
    error "Unable to set environment."
  fi
  log "INFO" "create" "[STEP] Search replace URLs."
  TMP_SR_LOG=$(mktemp)
  wp search-replace "$PRODUCTION_URL" "$STAGING_URL" --skip-themes --skip-plugins --quiet >"$TMP_SR_LOG" 2>&1
  SR_STATUS=$?
  SR_ERROR=$(cat "$TMP_SR_LOG" | grep -v '^0$' | grep -v '^$')
  rm -f "$TMP_SR_LOG"
  if [ $SR_STATUS -ne 0 ]; then
    log "ERROR" "create:search_replace" "Search replace error: $SR_ERROR"
    error "Unable to update URLs on staging."
  fi

  STAGING_CONFIG_JSON=$(wp option get staging_config --format=json --path=$PRODUCTION_DIR --skip-themes --skip-plugins --quiet)
  log "INFO" "create" "[STEP] Import config."
  TMP_CONFIG2_LOG=$(mktemp)
  wp option update staging_config "$STAGING_CONFIG_JSON" --format=json --path="$STAGING_DIR" --skip-themes --skip-plugins --quiet >"$TMP_CONFIG2_LOG" 2>&1
  CONFIG2_STATUS=$?
  CONFIG2_ERROR=$(cat "$TMP_CONFIG2_LOG" | grep -v '^0$' | grep -v '^$')
  rm -f "$TMP_CONFIG2_LOG"
  if [ $CONFIG2_STATUS -ne 0 ]; then
    log "ERROR" "create:import_config" "Import config error: $CONFIG2_ERROR"
    error "Unable to import global config on staging."
  fi

  log "INFO" "create" "[STEP] Coming soon ON."
  TMP_CS_LOG=$(mktemp)
  wp option update nfd_coming_soon 'true' --path="$STAGING_DIR" --skip-themes --skip-plugins --quiet >"$TMP_CS_LOG" 2>&1
  CS_STATUS=$?
  CS_ERROR=$(cat "$TMP_CS_LOG" | grep -v '^0$' | grep -v '^$')
  rm -f "$TMP_CS_LOG"
  if [ $CS_STATUS -ne 0 ]; then
    log "ERROR" "create:coming_soon" "Coming soon error: $CS_ERROR"
    error "Unable to turn on Coming Soon page in staging."
  fi
  log "INFO" "create" "[STEP] Flush rewrite."
  TMP_RF_LOG=$(mktemp)
  wp rewrite flush --path="$STAGING_DIR" --skip-themes --skip-plugins --quiet >"$TMP_RF_LOG" 2>&1
  RF_STATUS=$?
  RF_ERROR=$(cat "$TMP_RF_LOG" | grep -v '^0$' | grep -v '^$')
  rm -f "$TMP_RF_LOG"
  if [ $RF_STATUS -ne 0 ]; then
    log "ERROR" "create:rewrite_flush" "Flush rewrite error: $RF_ERROR"
    error "Unable to flush rewrite rules."
  fi
  log "INFO" "create" "[STEP] Rewrite htaccess."
  TMP_HTA_LOG=$(mktemp)
  rewrite_htaccess "$STAGING_DIR" >"$TMP_HTA_LOG" 2>&1
  HTA_STATUS=$?
  HTA_ERROR=$(cat "$TMP_HTA_LOG" | grep -v '^0$' | grep -v '^$')
  rm -f "$TMP_HTA_LOG"
  if [ $HTA_STATUS -ne 0 ]; then
    log "ERROR" "create:rewrite_htaccess" "Rewrite htaccess error: $HTA_ERROR"
    error "Unable to rewrite .htaccess."
  fi

  log "SUCCESS" "create:end" "Staging website created successfully."
  echo '{"status":"success","message":"Staging website created successfully.","reload":"true"}'
}

destroy() {
  log "INFO" "destroy:start" "Starting destruction of staging site."
  cd "$PRODUCTION_DIR" || error 'Unable to move to production directory.'
  if test -d "$STAGING_DIR"; then
    # Drop views and tables
    drop_views_and_tables "$STAGING_DIR"
    run_or_fail "destroy:delete_env" "Unable to reset staging environment in production." wp option delete staging_environment --path="$PRODUCTION_DIR" --skip-themes --skip-plugins --quiet
    run_or_fail "destroy:delete_config" "Unable to remove global staging config." wp option delete staging_config --path="$PRODUCTION_DIR" --skip-themes --skip-plugins --quiet
    run_or_fail "destroy:rm_dir" "Unable to remove staging files." rm -rf "$STAGING_DIR" --force
    log "SUCCESS" "destroy:end" "Staging website destroyed."
    echo '{"status":"success","message":"Staging website destroyed.","reload":"true"}'
  else
    log "INFO" "destroy:skip" "Staging directory does not exist, nothing to destroy."
    echo '{"status":"success","message":"Staging directory does not exist, nothing to destroy."}'
  fi
}

sso_staging() {
  if [ -z "$1" ]; then
    error 'No user provided.'
  fi
  wp eval 'file_exists( WPMU_PLUGIN_DIR . "/sso.php" ) ? unlink( WPMU_PLUGIN_DIR . "/sso.php" ) : null;' --path=$STAGING_DIR --skip-themes --skip-plugins --quiet
  LINK=$(wp newfold sso --url-only --id=$1 --path=$STAGING_DIR)
  log "SUCCESS" "sso_staging" "SSO to staging successful for user $1."
  echo '{"status":"success","load_page":"'$LINK'&redirect=admin.php?page=nfd-staging"}'
}

sso_production() {
  if [ -z "$1" ]; then
    error 'No user provided.'
  fi
  wp eval 'file_exists( WPMU_PLUGIN_DIR . "/sso.php" ) ? unlink( WPMU_PLUGIN_DIR . "/sso.php" ) : null;' --path=$PRODUCTION_DIR --skip-themes --skip-plugins --quiet
  LINK=$(wp newfold sso --url-only --id=$1 --path=$PRODUCTION_DIR)
  log "SUCCESS" "sso_production" "SSO to production successful for user $1."
  echo '{"status":"success","load_page":"'$LINK'&redirect=admin.php?page=nfd-staging"}'
}

clone() {
  cd "$PRODUCTION_DIR" || error 'Unable to move to production directory.'
  # Drop views and tables
  drop_views_and_tables "$STAGING_DIR"
  if [ "0" != "$USER_ID" ]; then
    SESSIONS=$(wp user meta get $USER_ID session_tokens --format=json --path="$STAGING_DIR" --skip-themes --skip-plugins --quiet)
  fi
  run_or_fail "clone:db_export" "Unable to export database." wp db export "$STAGING_DIR/.export-sql" --add-drop-table --skip-themes --skip-plugins --quiet
  run_or_fail "clone:sed_prefix" "Unable to update database prefix." sed -i -e "s/$DB_PREFIX/staging_$DB_PREFIX/g" "$STAGING_DIR/.export-sql"
  cd "$STAGING_DIR" || delete_temp_staging 5 "Unable to move to staging directory."
  run_or_fail "clone:db_import" "Unable to import database." wp db import "$STAGING_DIR/.export-sql" --skip-themes --skip-plugins --quiet
  if [ "0" != "$USER_ID" ]; then
    run_or_fail "clone:user_meta" "Unable to update user session tokens." wp user meta update $USER_ID session_tokens "$SESSIONS" --format=json --skip-themes --skip-plugins --quiet
  fi
  run_or_fail "clone:set_env_staging" "Unable to set environment." wp option update staging_environment staging --skip-themes --skip-plugins --quiet
  move_content_dirs "$PRODUCTION_DIR" "$STAGING_DIR"
  if [ -L "$PRODUCTION_DIR/index.php" ]; then
    echo "path=$STAGING_DIR" > /nfssys/etc/wp_symink_watch/$(whoami).notify
  else
    WP_VER=$(wp core version)
    run_or_fail "clone:core_download" "Unable to install WordPress in staging directory." wp core download --version="$WP_VER" --force
  fi
  run_or_fail "clone:search_replace" "Unable to update URLs on staging." wp search-replace "$PRODUCTION_URL" "$STAGING_URL" --skip-themes --skip-plugins --quiet
  run_or_fail "clone:import_config" "Unable to import global config on staging." wp option update staging_config "$STAGING_CONFIG_JSON" --format=json --path="$STAGING_DIR" --skip-themes --skip-plugins --quiet
  run_or_fail "clone:coming_soon" "Unable to turn on Coming Soon page in staging." wp option update nfd_coming_soon 'true' --path="$STAGING_DIR" --skip-themes --skip-plugins --quiet
  run_or_fail "clone:rewrite_flush" "Unable to flush rewrite rules." wp rewrite flush --path="$STAGING_DIR" --skip-themes --skip-plugins --quiet
  rm "$STAGING_DIR/.export-sql" --force
  rewrite_htaccess "$STAGING_DIR"
  log "SUCCESS" "clone:end" "Website cloned successfully."
  echo '{"status":"success","message":"Website cloned successfully."}'
}

deploy_files() {
  cd "$STAGING_DIR" || error 'Unable to move to staging directory.'
  if [ -L "$PRODUCTION_DIR/index.php" ]; then
    echo "path=$PRODUCTION_DIR" > /nfssys/etc/wp_symink_watch/$(whoami).notify
  else
    WP_VER=$(wp core version)
    run_or_fail "deploy_files:core_download" "Unable to move WordPress files." wp core download --version="$WP_VER" --force --path="$PRODUCTION_DIR" --skip-themes --skip-plugins --quiet
  fi
  run_or_fail "deploy_files:move_content_dirs" "Unable to move content directories." move_content_dirs "$STAGING_DIR" "$PRODUCTION_DIR"
  log "SUCCESS" "deploy_files:end" "Files deployed successfully."
  echo '{"status":"success","message":"Files deployed successfully."}'
}

deploy_db() {
  cd "$STAGING_DIR" || error 'Unable to move to staging directory.'
  trap 'log "ERROR" "deploy_db" "Unexpected error on line $LINENO"; error "Unexpected error in deploy_db."' ERR

  # Drop views and tables in production
  log "INFO" "deploy_db" "Command: drop_views_and_tables $PRODUCTION_DIR"
  drop_views_and_tables "$PRODUCTION_DIR"

  log "INFO" "deploy_db" "Command: wp db export $STAGING_DIR/.export-sql"
  OUTPUT=$(wp db export "$STAGING_DIR/.export-sql" --add-drop-table --skip-themes --skip-plugins --quiet 2>&1)
  if [ $? -ne 0 ]; then
    if [ -z "$OUTPUT" ]; then
      log "ERROR" "deploy_db" "Error command: (no output) - command performed: wp db export $STAGING_DIR/.export-sql"
    else
      log "ERROR" "deploy_db" "Error command: $OUTPUT"
    fi
    error "Unable to export database."
  fi

  log "INFO" "deploy_db" "Execution: sed -i -e s/staging_$DB_PREFIX/$DB_PREFIX/g $STAGING_DIR/.export-sql"
  OUTPUT=$(sed -i -e "s/staging_$DB_PREFIX/$DB_PREFIX/g" "$STAGING_DIR/.export-sql" 2>&1)
  if [ $? -ne 0 ]; then
    if [ -z "$OUTPUT" ]; then
      log "ERROR" "deploy_db" "Error command: (no output) - command executed: sed -i -e s/staging_$DB_PREFIX/$DB_PREFIX/g $STAGING_DIR/.export-sql"
    else
      log "ERROR" "deploy_db" "Error command: $OUTPUT"
    fi
    error "Unable to update prefix."
  fi

  log "INFO" "deploy_db" "Commandd: wp db import $STAGING_DIR/.export-sql"
  OUTPUT=$(wp db import "$STAGING_DIR/.export-sql" --path="$PRODUCTION_DIR" --skip-themes --skip-plugins --quiet 2>&1)
  if [ $? -ne 0 ]; then
    if [ -z "$OUTPUT" ]; then
      log "ERROR" "deploy_db" "Error command: (no output) - Command executed: wp db import $STAGING_DIR/.export-sql"
    else
      log "ERROR" "deploy_db" "Error command: $OUTPUT"
    fi
    error "Unable to import database."
  fi

  log "INFO" "deploy_db" "command: wp search-replace $STAGING_URL $PRODUCTION_URL"
  OUTPUT=$(wp search-replace "$STAGING_URL" "$PRODUCTION_URL" --path="$PRODUCTION_DIR" --skip-themes --skip-plugins --quiet 2>&1)
  if [ $? -ne 0 ]; then
    if [ -z "$OUTPUT" ]; then
      log "ERROR" "deploy_db" "Error command: (no output) - command executed: wp search-replace $STAGING_URL $PRODUCTION_URL"
    else
      log "ERROR" "deploy_db" "Error command: $OUTPUT"
    fi
    error "Unable to update URL on production."
  fi

  rm "$STAGING_DIR/.export-sql" --force

  log "INFO" "deploy_db" "command: wp option update staging_environment production"
  OUTPUT=$(wp option update staging_environment production --path="$PRODUCTION_DIR" --skip-themes --skip-plugins --quiet 2>&1)
  if [ $? -ne 0 ]; then
    if [ -z "$OUTPUT" ]; then
      log "ERROR" "deploy_db" "Error command: (no output) - command executed: wp option update staging_environment production"
    else
      log "ERROR" "deploy_db" "Error command: $OUTPUT"
    fi
    error "Unable to set environment."
  fi

  log "INFO" "deploy_db" "command: wp option update staging_config"
  OUTPUT=$(wp option update staging_config "$STAGING_CONFIG_JSON" --format=json --path="$PRODUCTION_DIR" --skip-themes --skip-plugins --quiet 2>&1)
  if [ $? -ne 0 ]; then
    if [ -z "$OUTPUT" ]; then
      log "ERROR" "deploy_db" "Error command: (no output) - command executed: wp option update staging_config ..."
    else
      log "ERROR" "deploy_db" "Error command: $OUTPUT"
    fi
    error "Unable to import global config on production."
  fi

  log "INFO" "deploy_db" "command: wp option delete nfd_coming_soon"
  OUTPUT=$(wp option delete nfd_coming_soon --path="$PRODUCTION_DIR" --skip-themes --skip-plugins --quiet 2>&1)
  if [ $? -ne 0 ]; then
    if [ -z "$OUTPUT" ]; then
      log "ERROR" "deploy_db" "Error command: (no output) - command executed: wp option delete nfd_coming_soon"
    else
      log "ERROR" "deploy_db" "Error command: $OUTPUT"
    fi
    error "Unable to turn off Coming Soon page."
  fi

  rewrite_htaccess "$PRODUCTION_DIR"
  log "SUCCESS" "deploy_db:end" "Database deployed successfully."
  echo '{"status":"success","message":"Database deployed successfully."}'
}

# --- Rewrite .htaccess ---
rewrite_htaccess() {
  local LOCATION="$1"
  # Run in a subshell and redirect all output to /dev/null to avoid polluting stdout
  ( wp eval 'global $wp_rewrite; echo $wp_rewrite->mod_rewrite_rules();' --path="$LOCATION" --skip-themes --skip-plugins --quiet > "$LOCATION/.htaccess" ) > /dev/null 2>&1 || error 'Unable to create .htaccess file.'
}

# --- Main Entrypoint ---
if [[ $(pwd) == *"staging"* ]]; then
  CURRENT_DIR=$STAGING_DIR
else
  CURRENT_DIR=$PRODUCTION_DIR
fi

compatibility_check "$1"
auth_action $2
lock_check

wp transient set nfd_staging_lock "true" 120 --path=$PRODUCTION_DIR --skip-themes --skip-plugins --quiet

case "$1" in
  create) create "$@";;
  destroy) destroy "$@";;
  clone) clone "$@";;
  deploy_files) deploy_files "$@";;
  deploy_db) deploy_db "$@";;
  sso_staging) sso_staging "$@";;
  sso_production) sso_production "$@";;
  *) log "ERROR" "main" "Unknown command: $1"; echo '{"status":"error","message":"Unknown command: '$1'"}'; exit 1;;
esac

# The lock will be cleaned up by the trap on exit
