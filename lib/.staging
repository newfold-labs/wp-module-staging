#!/bin/bash

# =========================
#  WP Staging Management Script
#  All-in-one, robust, maintainable
#  Comments in English
# =========================

set -e

# --- Usage/Help ---
if [[ "$1" == "-h" || "$1" == "--help" ]]; then
  echo "Usage: $0 <command> <auth_token> <production_dir> <staging_dir> <production_url> <staging_url> <user_id> <plugin_id> [function_param]"
  echo "Commands: create, clone, deploy_files, deploy_db, deploy_files_db, destroy, ..."
  exit 0
fi

# --- Parse parameters and set globals early (needed for logging path) ---
export PATH=/usr/local/bin:$PATH
PRODUCTION_DIR=$3
STAGING_DIR=$4
PRODUCTION_URL=$5
STAGING_URL=$6
USER_ID=$7
PLUGIN_ID=$8
DB_HOST=$(wp eval 'echo DB_HOST;' --path=$PRODUCTION_DIR --skip-themes --skip-plugins --quiet)
DB_NAME=$(wp eval 'echo DB_NAME;' --path=$PRODUCTION_DIR --skip-themes --skip-plugins --quiet)
DB_USER=$(wp eval 'echo DB_USER;' --path=$PRODUCTION_DIR --skip-themes --skip-plugins --quiet)
DB_PASS=$(wp eval 'echo DB_PASSWORD;' --path=$PRODUCTION_DIR --skip-themes --skip-plugins --quiet)
DB_PREFIX=$(wp eval 'global $wpdb;echo $wpdb->prefix;' --path=$PRODUCTION_DIR --skip-themes --skip-plugins --quiet)
PRODUCTION_TABLES=$(wp db tables --all-tables-with-prefix --format=csv --path=$PRODUCTION_DIR --skip-themes --skip-plugins --quiet)
# LOG_FILE must be set after PRODUCTION_DIR is set
LOG_FILE="$PRODUCTION_DIR/wp-content/uploads/nfd-staging.log"  # Log file always in production uploads
CONTENT_DIRS=(uploads themes plugins)

# --- Logging ---
log() {
  # log LEVEL STEP MESSAGE
  # Only write to log file (never stdout), to keep stdout clean for JSON parsing
  local level="$1"; local step="$2"; local msg="$3"
  mkdir -p "$(dirname "$LOG_FILE")"
  echo "$(date '+%Y-%m-%d %H:%M:%S') [$level] [$step] $msg" >> "$LOG_FILE"
  # Optionally, also print to stderr for debugging (uncomment if needed):
  # echo "$(date '+%Y-%m-%d %H:%M:%S') [$level] [$step] $msg" >&2
}

# --- Error Handling ---
error() {
  echo {"status":"error","message":"$1"}
  wp transient delete nfd_staging_lock --path="$PRODUCTION_DIR" --skip-themes --skip-plugins --quiet || true
  exit 1
}

run_or_fail() {
  # run_or_fail "step" "error message" command args...
  "$@" || { log "ERROR" "$1" "$2"; error "$2"; }
}

# --- Cleanup on exit ---
cleanup() {
  wp transient delete nfd_staging_lock --path="$PRODUCTION_DIR" --skip-themes --skip-plugins --quiet || true
}
trap cleanup EXIT

# --- Utility: Move/copy content dirs robustly ---
move_content_dirs() {
  local FROM="$1"; local TO="$2"
  for DIR in "${CONTENT_DIRS[@]}"; do
    rm -rf "$TO/wp-content/$DIR" || error "Unable to remove $DIR directory."
    mkdir -p "$TO/wp-content/$DIR" || error "Unable to create $DIR folder."
    local SRC="$FROM/wp-content/$DIR"
    local DEST="$TO/wp-content/$DIR"
    if [ -d "$SRC" ] && [ "$(ls -A "$SRC" 2>/dev/null)" ]; then
      # Try rsync, fix permissions if needed
      local RSYNC_LOG=$(mktemp)
      rsync -r --exclude=.git "$SRC/" "$DEST" 2> "$RSYNC_LOG"
      local RSYNC_EXIT=$?
      if [ $RSYNC_EXIT -ne 0 ]; then
        grep "Permission denied" "$RSYNC_LOG" | awk -F"open \"" '{print $2}' | awk -F"\"" '{print $1}' | while read -r FILE; do
          if [ -n "$FILE" ]; then
            chmod 644 "$FILE" 2>/dev/null
            chown $(whoami) "$FILE" 2>/dev/null
          fi
        done
        rsync -r --exclude=.git "$SRC/" "$DEST" || error "Unable to move $DIR folder (even after fixing permissions)."
      fi
      rm -f "$RSYNC_LOG"
    else
      log "INFO" "move_files:$DIR" "No files to copy in $DIR, skipping rsync."
    fi
  done
}

# --- Authentication ---
auth_action() {
  if [ ! -d "$CURRENT_DIR" ]; then
    mkdir -p "$CURRENT_DIR" || error 'Unable to create directory.'
  fi
  cd "$CURRENT_DIR" || error 'Unable to switch directory.'
  TOKEN=$(wp transient get staging_auth_token --path=$CURRENT_DIR --skip-themes --skip-plugins --quiet)
  if [ "$1" != "$TOKEN" ] || [ -z "$TOKEN" ]; then
    wp transient delete staging_auth_token --path=$CURRENT_DIR
    error 'Unable to authenticate the action.'
  fi
  wp transient delete staging_auth_token --path=$CURRENT_DIR --skip-themes --skip-plugins --quiet
}

# --- Lock check ---
lock_check() {
  local LOCK=$(wp transient get nfd_staging_lock --path=$PRODUCTION_DIR --skip-themes --skip-plugins --quiet)
  if [ -n "$LOCK" ]; then
    error 'Staging action is locked by another command.'
  fi
}

# --- Compatibility check ---
compatibility_check() {
  if ! command -v wp &>/dev/null; then
    echo "WP-CLI is not available."
    exit 1
  fi
  if [ "compat_check" == "$1" ]; then
    echo {"status":"success"}
    exit
  fi
}

# --- Rollback/Cleanup for failed staging creation ---
delete_temp_staging() {
  # Usage: delete_temp_staging <step> <message>
  # Rolls back partial staging creation if a step fails, cleaning up files, tables, and options.
  local step="${1:-0}"
  local message="${2:-Cleanup after failure}"
  step=$((step + 0))

  if [ "$step" -ge 5 ]; then
    wp option update nfd_coming_soon 'false' --path="$PRODUCTION_DIR" --skip-themes --skip-plugins --quiet
    log "INFO" "delete_temp_staging:step5" "Reverted nfd_coming_soon option."
  fi
  if [ "$step" -ge 4 ]; then
    wp option delete staging_config --path="$PRODUCTION_DIR" --skip-themes --skip-plugins --quiet
    log "INFO" "delete_temp_staging:step4" "Removed option staging_config."
  fi
  if [ "$step" -ge 3 ]; then
    wp db query "DROP TABLE IF EXISTS $(wp db tables --all-tables-with-prefix --format=csv --path=\"$STAGING_DIR\" | grep '^staging_' | tr '\n' ',' | sed 's/,$//')" --path="$STAGING_DIR" --skip-themes --skip-plugins --quiet
    log "INFO" "delete_temp_staging:step3" "Removed all staging tables."
  fi
  if [ "$step" -ge 2 ]; then
    wp option delete staging_environment --path="$PRODUCTION_DIR" --skip-themes --skip-plugins --quiet
    log "INFO" "delete_temp_staging:step2" "Removed option staging_environment."
  fi
  if [ "$step" -ge 1 ]; then
    rm -rf "$STAGING_DIR"
    log "INFO" "delete_temp_staging:step1" "Removed staging directory."
  fi

  log "ERROR" "delete_temp_staging" "$message"
  error "$message"
}

# --- Main Functions ---
create() {
  log "INFO" "create:start" "Starting staging creation."
  cd "$PRODUCTION_DIR" || error 'Unable to move to production directory.'
  WP_VER=$(wp core version)
  mkdir -p "$STAGING_DIR" || error 'Unable to create staging directory.'
  wp db export "$STAGING_DIR/.export-sql" --add-drop-table --skip-themes --skip-plugins --quiet --tables="$PRODUCTION_TABLES" || delete_temp_staging 1 "Unable to export database."
  wp option update staging_environment production --skip-themes --skip-plugins --quiet || delete_temp_staging 1 "Unable to set environment."
  cd "$STAGING_DIR" || delete_temp_staging 2 "Unable to move to staging directory."
  move_content_dirs "$PRODUCTION_DIR" "$STAGING_DIR"
  if [ -L "$PRODUCTION_DIR/index.php" ]; then
    echo "path=$STAGING_DIR" > /nfssys/etc/wp_symink_watch/$(whoami).notify
    echo "SetEnv WP_ABSPATH $STAGING_DIR" > .htaccess
  else
    wp core download --version="$WP_VER" --force || delete_temp_staging 2 "Unable to install WordPress in staging directory."
  fi
  wp core config --dbhost="$DB_HOST" --dbname="$DB_NAME" --dbuser="$DB_USER" --dbpass="$DB_PASS" --dbprefix="staging_$DB_PREFIX" --skip-themes --skip-plugins --quiet || delete_temp_staging 2 "Unable to configure WordPress."
  # Update DB prefix in SQL
  tmpfile=$(mktemp)
  while IFS= read -r line; do
    echo "${line//${DB_PREFIX}/staging_${DB_PREFIX}}" >> "$tmpfile"
  done < "$STAGING_DIR/.export-sql"
  mv "$tmpfile" "$STAGING_DIR/.export-sql" > /dev/null 2>&1 || delete_temp_staging 2 "Unable to update database prefix."
  wp db import "$STAGING_DIR/.export-sql" --skip-themes --skip-plugins --quiet || delete_temp_staging 2 "Unable to import database."
  rm "$STAGING_DIR/.export-sql" --force > /dev/null 2>&1  # Suppress unwanted output
  wp option update staging_environment staging --skip-themes --skip-plugins --quiet || delete_temp_staging 3 "Unable to set environment."
  wp search-replace "$PRODUCTION_URL" "$STAGING_URL" --skip-themes --skip-plugins --quiet || delete_temp_staging 3 "Unable to update URLs on staging."
  wp option update staging_config "$CONFIG" --path="$STAGING_DIR" --skip-themes --skip-plugins --quiet || delete_temp_staging 3 "Unable to import global config on staging."
  wp option update nfd_coming_soon 'true' --path="$STAGING_DIR" --skip-themes --skip-plugins --quiet || delete_temp_staging 4 "Unable to turn on Coming Soon page in staging."
  wp rewrite flush --path="$STAGING_DIR" --skip-themes --skip-plugins --quiet || delete_temp_staging 5 "Unable to flush rewrite rules."
  rewrite_htaccess "$STAGING_DIR"

  log "SUCCESS" "create:end" "Staging website created successfully."
  # Only this echo should go to stdout for JSON parsing
  echo '{"status":"success","message":"Staging website created successfully.","reload":"true"}'
}

# --- Other main functions (clone, deploy_files, deploy_db, destroy, etc.) would follow the same refactored pattern as create ---
# For brevity, only create is shown fully here. I can continue with the rest if you confirm this structure is what you want.

# --- Rewrite .htaccess ---
rewrite_htaccess() {
  local LOCATION="$1"
  # Run in a subshell and redirect all output to /dev/null to avoid polluting stdout
  ( wp eval 'global $wp_rewrite; echo $wp_rewrite->mod_rewrite_rules();' --path="$LOCATION" --skip-themes --skip-plugins --quiet > "$LOCATION/.htaccess" ) > /dev/null 2>&1 || error 'Unable to create .htaccess file.'
}

# --- Main Entrypoint ---
if [[ $(pwd) == *"staging"* ]]; then
  CURRENT_DIR=$STAGING_DIR
else
  CURRENT_DIR=$PRODUCTION_DIR
fi

compatibility_check "$1"
auth_action $2
lock_check
CONFIG=$(wp option get staging_config --format=json --path=$PRODUCTION_DIR --skip-themes --skip-plugins --quiet)
wp transient set nfd_staging_lock "true" 120 --path=$PRODUCTION_DIR --skip-themes --skip-plugins --quiet

case "$1" in
  create) create "$@";;
  # clone) clone "$@";;
  # deploy_files) deploy_files "$@";;
  # deploy_db) deploy_db "$@";;
  # destroy) destroy "$@";;
  # ... add other commands as needed ...
  *) echo "Unknown command: $1"; exit 1;;
esac

# The lock will be cleaned up by the trap on exit
